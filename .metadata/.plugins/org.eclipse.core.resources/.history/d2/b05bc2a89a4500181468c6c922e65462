package com.baodanwang.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.aspectj.ajde.ui.StructureViewProperties.Sorting;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.baodanwang.pojo.Bulks;
import com.baodanwang.pojo.Homeimage;
import com.baodanwang.pojo.Orders;
import com.baodanwang.pojo.Stores;
import com.baodanwang.pojo.Users;
import com.baodanwang.service.HomeImageService;
import com.baodanwang.service.OrdersService;
import com.baodanwang.service.StoresService;
import com.baodanwang.service.UsersService;
import com.baodanwang.util.OpenidBean;
import com.baodanwang.util.WXUtil;

import net.sf.json.JSON;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Controller
@RequestMapping(value = "/weChat")
public class WeChatController {

	@Autowired
	private StoresService storesService;
	@Autowired
	private HomeImageService homeImageService;
	@Autowired
	private UsersService usersService;
	@Autowired
	private OrdersService ordersService;

	@ResponseBody
	@RequestMapping(value = "/getOpenid", method = RequestMethod.POST)
	public JSON getOpenid(HttpServletRequest req, HttpServletResponse rep) throws Exception {
		String secret = req.getParameter("secret");
		String appid = req.getParameter("appid");
		String code = req.getParameter("code");
		System.out.println(secret + " " + appid + " " + code);
		OpenidBean openidBean = WXUtil.getOpenid(appid, secret, code);
		return JSONObject.fromObject(openidBean);
	}

	@ResponseBody
	@RequestMapping(value = "/getHomeImage", method = RequestMethod.POST)
	public JSON getHomeImage(HttpServletRequest req, HttpServletResponse rep) throws Exception {
		Homeimage homeimage = homeImageService.getHomeImage();
		String image = homeimage.getHomeImage();
		homeimage.setHomeImage("http://vbywpj.natappfree.cc/baodanwang" + image);
		return JSONObject.fromObject(homeimage);
	}

	@ResponseBody
	@RequestMapping(value = "/getStore", method = RequestMethod.POST)
	public JSON getStore(HttpServletRequest req, HttpServletResponse rep) throws Exception {
		String storeNickname = req.getParameter("storeNickname");
		String storeOpenid = req.getParameter("storeOpenid");
		String storeAvatarurl = req.getParameter("storeAvatarurl");
		Stores stores = storesService.getStore(storeOpenid, storeNickname, storeAvatarurl);
		JSONObject result = JSONObject.fromObject(stores);
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/updataStore", method = RequestMethod.POST)
	public JSON updataStore(HttpServletRequest req, HttpServletResponse rep) throws Exception {
		String storeId = req.getParameter("storeId");
		String storeName = req.getParameter("storeName");
		String storeTel = req.getParameter("storeTel");
		String storeWechatid = req.getParameter("storeWechatid");
		String storeAddress = req.getParameter("storeAddress");
		String storeAddressdetail = req.getParameter("storeAddressdetail");
		String storePickupsite = req.getParameter("storePickupsite");
		Stores store = storesService.getStore(storeId);
		System.out.println(store.toString());
		if (storeName != null && storeName != "") {
			store.setStoreName(storeName);
		}
		if (storeTel != null && storeTel != "") {
			store.setStoreTel(storeTel);
		}
		if (storeWechatid != null && storeWechatid != "") {
			store.setStoreWechatid(storeWechatid);
		}
		if (storeAddress != null && storeAddress != "") {
			store.setStoreAddress(storeAddress);
		}
		if (storePickupsite != null && storePickupsite != "") {
			store.setStorePickupsite(storePickupsite);
		}
		if (storeAddressdetail != null && storeAddressdetail != "") {
			store.setStoreAddressdetail(storeAddressdetail);
		}
		int result = storesService.upDataStore(store);
		JSONObject datas = new JSONObject();
		if (result == 1) {
			datas.accumulate("result", "修改成功");
		} else {
			datas.accumulate("result", "修改失败");
		}
		return datas;

	}

	@ResponseBody
	@RequestMapping(value = "/getUser", method = RequestMethod.POST)
	public JSON getUser(HttpServletRequest req, HttpServletResponse rep) throws Exception {
		String userName = req.getParameter("userName");
		String userOpenid = req.getParameter("userOpenid");
		String userAvatarurl = req.getParameter("userAvatarurl");
		Users user = usersService.getUser(userName, userOpenid, userAvatarurl);
		JSONObject result = JSONObject.fromObject(user);
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/getOrder", method = RequestMethod.POST)
	public JSON getOrder(HttpServletRequest req, HttpServletResponse rep) throws Exception {
		String id = req.getParameter("id");
		String type = req.getParameter("type");
		List<Orders> order = ordersService.getOrder(id, type);
		JSONObject orders = JSONObject.fromObject(order);
		return orders;
	}

	@ResponseBody
	@RequestMapping(value = "/insertBulk", method = RequestMethod.POST)
	public JSON insertBulk(HttpServletRequest req, HttpServletResponse rep,@RequestParam("bulkPicture") MultipartFile bulkPicture,@RequestParam("bulkWechatcodepicture") MultipartFile bulkWechatcodepicture) throws Exception {
		String storeId = req.getParameter("storeId");
		String bulkTitle = req.getParameter("bulkTitle");
		String bulkAnnouncement = req.getParameter("bulkAnnouncement");
		String bulkWechatidstatus = req.getParameter("bulkWechatidstatus");
		String bulkPickupway = req.getParameter("bulkPickupway");
		String bulkShowstatus = req.getParameter("bulkShowstatus");
		String goodsList = req.getParameter("goodsList");
		UUID bulkId =  UUID.randomUUID();
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String bulkAddtime = sdf.format(date);
		JSONArray jsonArray = JSONArray.fromObject(goodsList);
		for(int i=0;i<jsonArray.size();i++) {
			JSONObject object = jsonArray.getJSONObject(i);
		}
		String filePath = req.getServletContext().getRealPath("upload");
		String filename = bulkPicture.getOriginalFilename();
		File targetFile = new File(filePath, String.valueOf(bulkId)+filename);
		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}
		// 保存
		try {
			bulkPicture.transferTo(targetFile);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Date date1 = new Date();
		SimpleDateFormat fmt = new SimpleDateFormat("yyyyMMddHHmmssSSS");
		String fileNameBefore =  fmt.format(date1);
		File targetFile1 = new File(filePath, String.valueOf(bulkId)+filename);
		if (!targetFile1.exists()) {
			targetFile1.mkdirs();
		}
		// 保存
		try {
			bulkWechatcodepicture.transferTo(targetFile1);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Bulks bulks = new Bulks();
		bulks.setBulkId(String.valueOf(bulkId));
		bulks.setStoreId(storeId);
		bulks.setBulkAddtime(bulkAddtime);
		bulks.setBulkTitle(bulkTitle);
		bulks.setBulkAnnouncement(bulkAnnouncement);
//		bulks.setBulkPicture(bulkPicture);
		bulks.setBulkWechatidstatus(bulkWechatidstatus);
//		bulks.setBulkWechatcodepicture(bulkWechatcodepicture);
		bulks.setBulkPickupway(bulkPickupway);
		bulks.setBulkStatus("0");
		if(bulkShowstatus!=null) {
			bulks.setBulkShowstatus(bulkShowstatus);
		}else {
			bulks.setBulkShowstatus("0");
		}
		return null;
	}
}
